package lab5.simulator;

import lab5.event.CloseStoreEvent;
import lab5.event.StartEvent;
import lab5.event.StopEvent;
import lab5.state.StoreState;
import lab5.view.StoreView;

/**
 * 
 * @author Gustav Sjöberg
 * @author Max Forsgren
 * @author Sebastian Rydström
 * @author Erik Persson  
 *
 */
public class Simulator {

	EventQueue queue;
	SimState state;
	SimView view;
	
	/**
	 * Constructor for simulator.
	 * 
	 * @param state that updates all the states in the program.
	 * @param queue that keeps track and sorts all the events.
	 * @param view that will display the simulation flow.
	 */
	public Simulator(SimState state) {
		this.state = state;
		this.queue = new EventQueue();
		this.view = new StoreView();;
		
		queue.add(new StartEvent((StoreState)state,queue));
		queue.add(new CloseStoreEvent((StoreState) state, queue));
		queue.add(new StopEvent((StoreState) state,queue));
		
		//state.addObserver(view);
		//this.state.addObserver(this.view); //såg att man kunde göra på detta sätt diskutera om vi ska ha så.
		
	}
	
	public void run() {
		
		//getSimStatus nödflagga från storestate som blir false när vi når StopEventet.
		//Kan alternativt använda att vi kollar om listan är tom eller inte?
		while(((StoreState) state).getSimStatus()) {
			this.state.addObserver(this.view);
			//getEvent metod ger nästa korrekta event som ska ges
			Event event = queue.getNext();
			
			//Utför eventet.
			event.execute();
		}
	}
	public SimState run2() {
		while(((StoreState) state).getSimStatus()) {
			
			//getEvent metod ger nästa korrekta event som ska ges
			Event event = queue.getNext();
			
			//Utför eventet.
			event.execute();
		}
		return this.state;
	}
	
	
}
