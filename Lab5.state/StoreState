package lab5.state;

import java.text.DecimalFormat;
import java.util.Observable;

import lab5.simulator.EventQueue;
import lab5.simulator.SimState;
import lab5.time.ExponentialRandomStream;
import lab5.time.UniformRandomStream;

public class StoreState extends SimState {
	private int maxCustomers,finishedCustomers,missedCustomers;
	private double openingHours;
	private int noCheckouts, noInCheckout,noFreeCheckouts;
	private double pickingLower,pickingUpper,checkoutLower,checkoutUpper;
	private double lambda;
	private boolean storeOpen;
	private boolean simStatus = true; // simulering startar när objektet skapas
	public FIFO checkoutLine; // en FIFO som ska representera kön till kassan
	private double freeTimeCheckout,timeInQueue,simTime;
	private int customersInStore,totalNoQueue;
	private long seed;
	private Customer recentCustomer;
	private CreateCustomer customerFactory;
	private ExponentialRandomStream ArrivalTimeGenerator1;
	private ExponentialRandomStream ArrivalTimeGenerator2;
	private UniformRandomStream PickingTimeGenerator1;
	private UniformRandomStream PickingTimeGenerator2;
	private UniformRandomStream CheckoutTimeGenerator1;
	private UniformRandomStream CheckoutTimeGenerator2;
	private String recentEvent = "Start";
	private double stopTime = 999;
	private double lastCheckoutTime;
	private double recentTime;

	
	//Konstruktor som skapar vårat state
	
	public StoreState(int maxCustomers,int noCheckouts, long seed, double lambda,double openingHours
			,double pickingLower, double pickingUpper, double checkoutLower, double checkoutUpper) {
		this.totalNoQueue = 0;
		this.openingHours = openingHours;
		this.maxCustomers = maxCustomers;
		this.noCheckouts = noCheckouts;
		this.freeTimeCheckout = 0;
		this.seed = seed; 
		this.timeInQueue = 0;
		this.simTime = 0;
		this.recentTime =0;
		this.lambda = lambda;
		this.pickingUpper = pickingUpper;
		this.pickingLower = pickingLower;
		this.checkoutLower = checkoutLower;
		this.checkoutUpper = checkoutUpper;
		customerFactory = new CreateCustomer();
		checkoutLine = new FIFO();
		ArrivalTimeGenerator1 = new ExponentialRandomStream(lambda,seed);
		ArrivalTimeGenerator2 = new ExponentialRandomStream(lambda);
		PickingTimeGenerator1 = new UniformRandomStream(pickingLower,pickingUpper,seed);
		PickingTimeGenerator2 = new UniformRandomStream(pickingLower,pickingUpper);
		CheckoutTimeGenerator1 = new UniformRandomStream(checkoutLower,checkoutUpper,seed);
		CheckoutTimeGenerator2 = new UniformRandomStream(checkoutLower,checkoutUpper);
		

	} 
	public void setRecentTime(double d) {
		this.recentTime = d;
	}
	public double getRecentTime() {
		return this.recentTime;
	}
	public void setLastCheckoutTime(double d) {
		if(this.lastCheckoutTime < d) {
			this.lastCheckoutTime = d;
		}
	}
	public double getLastCheckoutTime() {
		return this.lastCheckoutTime;
	}

	
	public double getStopTime() {
		return this.stopTime;
	}
	
	public double getOpeningHours() {
		return this.openingHours;
	}
	
	public double getPickingLower() {
		return this.pickingLower;
	}
	public double getPickingUpper() {
		return this.pickingUpper;
	}
	public double getCheckoutLower() {
		return this.checkoutLower;
	}
	public double getCheckoutUpper() {
		return this.checkoutUpper;
	}
	
	
	public int getFreeCheckouts() {
		if(noCheckouts - noInCheckout <= 0) {
			return 0;
		}
		else {
			return noCheckouts - noInCheckout;
		}
	}
	
	public Customer newCustomer() {
		return customerFactory.addToCount();
	}
	
	public void addToCheckoutLine(Customer c) {
		checkoutLine.add(c);
	}
	public void removeFromCheckoutLine() {
		checkoutLine.removeFirst();
		
	}
	public void addCheckoutCustomer() {
		this.noInCheckout++;
	}
	public void removeCheckoutCustomer() {
		this.noInCheckout--;
	}
	public boolean getIsPlace() {
		if(customersInStore < maxCustomers) {
			return true;
		}
		return false;
	}
	
	public boolean isCheckoutLineEmpty() {
		if(this.checkoutLine.isEmpty()) {
			return true;
		}
		return false;
	}
	
	public Customer getFirstCheckoutLine() {
		return this.checkoutLine.getFirst();
	}
	
	public void addFinishedCustomers() {
		this.finishedCustomers++;
	}
	public int getFinishedCustomers() {
		return this.finishedCustomers;
	}
		
	public void addMissedCustomer() {
		this.missedCustomers++;
	}
	public int getMissedCustomer() {
		return this.missedCustomers;
	}
	
	
	public void addTotalNoQueue() {
		this.totalNoQueue++;
	}
	public int getTotalNoQueue() {
		return this.totalNoQueue;
	}
	
	public int getFIFOsize() {
		return this.checkoutLine.Size();
	}
	
	
	public String printFIFO() {
		return this.checkoutLine.toString();
	}
	
	
	public void updateState() {
		setChanged();
		notifyObservers();
	}
	public String emptyString() {
		return "";
	}
	public String threeLines() {
		return "---";
	}
	
	public double getArrivalTime() {
		return this.ArrivalTimeGenerator1.next() + simTime; //exp1 eller exp2 ????
	}
	public double getPickingTime() {
		return this.PickingTimeGenerator1.next() + simTime;
	}
	public double getCheckoutTime() {
		return this.CheckoutTimeGenerator1.next() + simTime;
	}
	
	public void addCustomerInStore() {
		this.customersInStore++;
	}
	public void removeCustomerInStore() {
		this.customersInStore--;
	}
	public int getCustomerInStore() {
		return this.customersInStore;
	}
	
	public String getOpenLetter() {
		if(this.storeOpen) {
			return "Ö";
		}
		else {
			return "S";
		}
	}
	
	
	public void setRecentCustomer(Customer c) {
		this.recentCustomer = c;
	}
	public String getRecentCustomerID() {
		//if(customersInStore == 0) {
		//	return "";
		//}
		return this.recentCustomer.toString();
	}
	
	
	public String getRecentEvent() {
		return this.recentEvent;
	}
	public void setRecentEvent(String s) {
		this.recentEvent = s;
	}

	
	public boolean getStoreStatus() { //Ger status om butiken är öppen eller inte
		return this.storeOpen;
	}
	
	public boolean getSimStatus() { //Ger status om simulering är pågåenden eller inte
		return this.simStatus;
	}
	public void stopSim() { //Stoppar simulationen
		this.simStatus = false;
	}
	
	public void start() {
	}
	
	public void openStore() { //Öppnar affären om den är stängd
		if (this.storeOpen) {
			System.out.println("Affären är redan öppen");
		}
		else {
			this.storeOpen = true;
		}
	}
	
	public void closeStore() { //Stänger affären om den är öppen
		if (this.storeOpen) {
			this.storeOpen = false;
		}
		else {
			System.out.println("Affären är redan stängd");
		}
	}
	
	public String getTimeElapsed() { //returnerar den tid som har gått på simulationen
		return formatOutput(this.simTime);
	}
	
	
	public void updateTime(double t) {
		this.simTime = t;
	}
	
	public double getFreeCheckoutTime() {
		return this.freeTimeCheckout;
	}
	
	public int getNoCheckouts() {
		return this.noCheckouts;
	}
	
	public int getMaxCustomers() {
		return this.maxCustomers;
	}
	public long getSeed() {
		return this.seed;
	}
	public double getLambda() {
		return this.lambda;
	}
	@Override
	public void stop() {
		// TODO Auto-generated method stub
		
	}
	
	public double getTimeZero() {
		return 0;
	}
	public void updateCheckQueue(EventQueue queue) {
			
				//Tiden som kassorna är lediga.
				this.freeTimeCheckout += this.getFreeCheckouts() *
						(this.simTime - this.getRecentTime());
				//Kötiden
				this.timeInQueue += checkoutLine.Size() * 
						(this.simTime - this.getRecentTime());
			
	
			}
	public String getAverageQueueTime1() {
		double d = this.timeInQueue/this.totalNoQueue;
		return formatOutput(d);
	}
			
	public String getCashierTime() {
		return formatOutput(this.freeTimeCheckout);
	}
			
	public String getQueueTime() {
		return formatOutput(this.timeInQueue);
	}
	public String getAverageQueueTime() {
		double s = this.freeTimeCheckout/this.noCheckouts;
		return formatOutput(s);
	}
	public String getPrecentage() {
		double s1 = this.freeTimeCheckout/this.noCheckouts;
		double s2 = (s1/this.getLastCheckoutTime())*100;
		return formatOutput(s2);
		
	}
	public String formatOutput(double d) {
		if(d == 0) {
			return "0,00 ";
		}
		else if(d < 0.1) {
			return String.format("%.1g", d) + " ";
		}
		else if(d < 1) {
			return String.format("%.2g", d) + " ";
		}
		
		else if(d < 10) {
			return String.format("%.3g", d) + " ";
		}
		else if(d < 100) {
			return String.format("%.4g", d);
		}
		else if(d < 1000) {
			return String.format("%.5g", d);
		}
		return "";
		
	}
}


